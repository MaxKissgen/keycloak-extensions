{"version":3,"sources":["../../../src/app/content/learning-layers-account/UserClientPage.tsx"],"names":["React","Button","DataList","DataListCell","DataListItem","DataListItemCells","DataListItemRow","DataListToggle","Form","FormGroup","Grid","GridItem","TextInput","ContentPage","Msg","AccountServiceContext","MinusCircleIcon","TrashIcon","ContentAlert","UserClientPage","Component","constructor","props","context","event","preventDefault","form","target","isValid","checkValidity","state","adminTok","url","authUrl","realm","doPost","adminToken","then","response","ok","fetchClients","success","localize","warning","status","statusText","value","currentTarget","name","setState","tokenInputEnabled","isRowOpen","clients","doGet","data","Array","length","fill","elementId","item","client","clientId","handleCreate","window","location","hash","handleDeleteClient","doDelete","handleUnlinkClient","handleManageClient","render","toggleLinkClient","handleAddClient","handleChangeAdminTok","visibility","map","appIndex","description"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n    ActionGroup,\r\n    Button,\r\n    Card,\r\n    CardBody, DataList, DataListCell, DataListContent, DataListItem, DataListItemCells, DataListItemRow, DataListToggle,\r\n    EmptyState,\r\n    EmptyStateBody,\r\n    EmptyStateVariant, Form, FormGroup,\r\n    Grid,\r\n    GridItem, TextArea, TextInput,\r\n    Title\r\n} from '@patternfly/react-core';\r\nimport { ContentPage } from '../ContentPage'\r\nimport { Msg } from '../../widgets/Msg'\r\nimport { AccountServiceContext } from '../../account-service/AccountServiceContext';\r\nimport { HttpResponse } from '../../account-service/account.service'\r\nimport {ExternalLinkAltIcon, MinusCircleIcon, TrashIcon} from \"@patternfly/react-icons\";\r\nimport {ContentAlert} from \"../ContentAlert\";\r\nimport {Link, Route, RouteComponentProps} from \"react-router-dom\";\r\n\r\n// can be found at /keycloak.v2/account/index.ftl\r\ndeclare const authUrl: string;\r\ndeclare const realm: string;\r\n\r\nexport interface ClientsPageProps {\r\n}\r\n\r\nexport interface ClientsPageState {\r\n    // isRowOpen already here for later use and expanding the list of clients\r\n    isRowOpen: boolean[];\r\n    tokenInputEnabled: boolean;\r\n    adminTok: string;\r\n    clients: Client[];\r\n}\r\n\r\nexport interface Client {\r\n    clientId: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n\r\nexport class UserClientPage extends React.Component<ClientsPageProps, ClientsPageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n    public constructor(props: ClientsPageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n        this.state = {\r\n            isRowOpen: [],\r\n            tokenInputEnabled: false,\r\n            adminTok: '',\r\n            clients: []\r\n        };\r\n\r\n        this.fetchClients();\r\n    }\r\n\r\n\r\n\r\n    private fetchClients(): void {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/clients'\r\n        this.context!.doGet<Client[]>(url).then((response: HttpResponse<Client[]>) => {\r\n            const clients = response.data || [];\r\n            this.setState({\r\n                isRowOpen: new Array(clients.length).fill(false),\r\n                tokenInputEnabled: false,\r\n                adminTok: '',\r\n                clients: clients\r\n            });\r\n        });\r\n    }\r\n\r\n    private elementId(item: string, client: Client): string {\r\n        return `application-${item}-${client.clientId}`;\r\n    }\r\n\r\n    private handleCreate() {\r\n        return window.location.hash = 'userClients/client'\r\n    }\r\n\r\n    private handleDeleteClient(clientId: string) {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/' + clientId;\r\n        this.context!.doDelete(url).then((response: HttpResponse) => {\r\n            if(response.ok) {\r\n                this.fetchClients();\r\n                ContentAlert.success('Client successfully deleted');\r\n            } else {\r\n                ContentAlert.warning('Client could not be deleted.\\n' +  response.status + ' ' + response.statusText);\r\n            }\r\n        })\r\n    }\r\n\r\n    private handleUnlinkClient(clientId: string) {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/access/' + clientId;\r\n        this.context!.doDelete(url).then((response: HttpResponse) => {\r\n            if (response.ok) {\r\n                this.fetchClients();\r\n                ContentAlert.success('Client successfully unlinked from you');\r\n            } else {\r\n                ContentAlert.warning('Client could not be unlinked.\\n' + response.status + ' ' + response.statusText);\r\n            }\r\n        })\r\n    }\r\n\r\n    private handleManageClient(clientId: string) {\r\n        window.location.hash = 'userClients/client/' + clientId;\r\n    }\r\n\r\n    private handleAddClient = (event: React.FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        const form = event.target as HTMLFormElement;\r\n        const isValid = form.checkValidity();\r\n        if (isValid && this.state.adminTok != '') {\r\n            let url = authUrl + 'realms/' + realm + '/userClientAdministration/access';\r\n            this.context!.doPost<HttpResponse>(url, {adminToken: this.state.adminTok})\r\n                .then((response: HttpResponse) => {\r\n                    if(response.ok) {\r\n                        this.fetchClients();\r\n                        ContentAlert.success(Msg.localize('successfullClientCreation'));\r\n                    } else {\r\n                        ContentAlert.warning('Could not link client.\\n' + response.status + ' ' + response.statusText);\r\n                    }\r\n                });\r\n        } else {\r\n            ContentAlert.warning('Given administration token invalid.');\r\n        }\r\n\r\n    }\r\n\r\n    private handleChangeAdminTok = (value: string, event: React.FormEvent<HTMLInputElement>) => {\r\n        const target = event.currentTarget;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            adminTok: value\r\n        });\r\n    }\r\n\r\n    private toggleLinkClient = () => {\r\n        this.setState({\r\n            tokenInputEnabled: !this.state.tokenInputEnabled,\r\n            adminTok: '',\r\n        })\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        return (\r\n            <ContentPage title=\"personalClientTitle\" introMessage=\"personalClientDescription\">\r\n                <Grid>\r\n                    <GridItem offset={11} span={1}>\r\n                        <Button id=\"add-client-btn\" variant=\"control\" onClick={this.toggleLinkClient}>\r\n                            <Msg msgKey=\"doAddClient\" />\r\n                        </Button>\r\n                    </GridItem>\r\n                    <GridItem offset={12} span={1}>\r\n                        <Button id=\"create-btn\" variant=\"control\" onClick={this.handleCreate}>\r\n                            <Msg msgKey=\"doCreateClient\" />\r\n                        </Button>\r\n                    </GridItem>\r\n                </Grid>\r\n                {this.state.tokenInputEnabled && (\r\n                    <React.Fragment>\r\n                        <Form isHorizontal onSubmit={event => this.handleAddClient(event)}>\r\n                            <FormGroup label={Msg.localize('adminToken')}\r\n                                       fieldId='admin-token'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='admin-token'\r\n                                    name='adminTok'\r\n                                    value={this.state.adminTok}\r\n                                    onChange={this.handleChangeAdminTok}\r\n                                />\r\n                                <Grid>\r\n                                    <GridItem span={1}>\r\n                                        <Button\r\n                                            type=\"submit\"\r\n                                            id=\"add-client-btn\"\r\n                                            variant=\"primary\"\r\n                                        >\r\n                                            <Msg msgKey=\"doAddClient\" />\r\n                                        </Button>\r\n                                    </GridItem>\r\n                                    <GridItem offset={1} span={1}>\r\n                                        <Button\r\n                                            id='clear-tok-field-btn'\r\n                                            variant='tertiary'\r\n                                            onClick={() => this.setState({ adminTok: ''})}\r\n                                        >\r\n                                            <Msg msgKey='doClearTokenField' />\r\n                                        </Button>\r\n                                    </GridItem>\r\n                                </Grid>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <div className=\"pf-c-divider pf-m-vertical pf-m-inset-md\" role=\"separator\"> </div>\r\n                    </React.Fragment>\r\n                )}\r\n                <DataList id=\"client-list\" aria-label=\"Clients\" isCompact>\r\n                    <DataListItem id=\"client-list-header\" aria-labelledby=\"Column names\">\r\n                        <DataListItemRow>\r\n                            // invisible toggle allows headings to line up properly\r\n                            <span style={{ visibility: 'hidden' }}>\r\n                                <DataListToggle\r\n                                    isExpanded={false}\r\n                                    id='applications-list-header-invisible-toggle'\r\n                                    aria-controls=\"hidden\"\r\n                                />\r\n                            </span>\r\n                            <DataListItemCells\r\n                                dataListCells={[\r\n                                    <DataListCell key='client-list-client-id-header' width={2}>\r\n                                        <strong><Msg msgKey='clientId' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-name-header' width={2}>\r\n                                        <strong><Msg msgKey='clientName' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-description-header' width={2}>\r\n                                        <strong><Msg msgKey='clientDescription' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-delete-header' width={1}>\r\n                                        <Grid>\r\n                                            <GridItem span={6}>\r\n                                                <strong><Msg msgKey='clientUnlink'/></strong>\r\n                                            </GridItem>\r\n                                            <GridItem span={6}>\r\n                                                <strong><Msg msgKey='clientDelete'/></strong>\r\n                                            </GridItem>\r\n                                        </Grid>\r\n                                    </DataListCell>,\r\n                                ]}\r\n                            />\r\n                        </DataListItemRow>\r\n                    </DataListItem>\r\n                    {this.state.clients.map((client: Client, appIndex: number) => {\r\n                        return (\r\n                            <DataListItem id={this.elementId(\"client-id\", client)} key={'client-' + appIndex} aria-labelledby=\"client-list\" isExpanded={this.state.isRowOpen[appIndex]}>\r\n                                <DataListItemRow>\r\n                                    {/*<DataListToggle*/}\r\n                                    {/*    onClick={() => this.onToggle(appIndex)}*/}\r\n                                    {/*    isExpanded={this.state.isRowOpen[appIndex]}*/}\r\n                                    {/*    id={this.elementId('toggle', application)}*/}\r\n                                    {/*    aria-controls={this.elementId(\"expandable\", application)}*/}\r\n                                    {/*/>*/}\r\n                                    <DataListItemCells\r\n                                        dataListCells={[\r\n                                            <DataListCell id={this.elementId('id', client)} width={2} key={'id-' + appIndex}>\r\n                                                <Button component=\"a\" variant=\"link\" onClick={() => this.handleManageClient(client.clientId)}>\r\n                                                    { client.clientId }\r\n                                                </Button>\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('name', client)} width={2} key={'name-' + appIndex}>\r\n                                                { client.name || '---' }\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('description', client)} width={2} key={'description-' + appIndex}>\r\n                                                { client.description || '---'}\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('delete', client)} width={1} key={'delete-' + appIndex}>\r\n                                                <Grid>\r\n                                                    <GridItem span={6}>\r\n                                                        <Button component=\"a\" variant=\"secondary\" onClick={() => this.handleUnlinkClient(client.clientId)}>\r\n                                                            <MinusCircleIcon/>\r\n                                                        </Button>\r\n                                                    </GridItem>\r\n                                                    <GridItem span={6}>\r\n                                                        <Button component=\"a\" variant=\"danger\" onClick={() => this.handleDeleteClient(client.clientId)}>\r\n                                                            <TrashIcon/>\r\n                                                        </Button>\r\n                                                    </GridItem>\r\n                                                </Grid>\r\n                                            </DataListCell>\r\n                                        ]}\r\n                                    />\r\n                                </DataListItemRow>\r\n                            </DataListItem>\r\n                        )\r\n                    })}\r\n                </DataList>\r\n            </ContentPage>\r\n        );\r\n    };\r\n}"],"file":"UserClientPage.js"}