{"version":3,"sources":["../../src/app/util/MultiLineInput.tsx"],"names":["React","useFieldArray","useFormContext","useWatch","TextInput","Button","ButtonVariant","InputGroup","MinusCircleIcon","PlusCircleIcon","convertToMultiline","fields","length","map","field","value","toValue","formValue","MultiLineInput","name","addButtonLabel","rest","register","control","reset","append","remove","currentValues","useEffect","id","index","link","isDisabled"],"mappings":";;AAAA;AACA,OAAO,KAAKA,KAAZ;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,QAAxC;AACA,SACIC,SADJ,EAEIC,MAFJ,EAGIC,aAHJ,EAKIC,UALJ;AAOA,SAASC,eAAT,EAA0BC,cAA1B;AAMA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAA2D;AAC9D,SAAO,CAACA,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAA1B,GAA8BD,MAA9B,GAAuC,CAAC,EAAD,CAAxC,EAA8CE,GAA9C,CAAmDC,KAAD,IAAW;AAChE,WAAO;AAAEC,MAAAA,KAAK,EAAED;AAAT,KAAP;AACH,GAFM,CAAP;AAGH;AAED,OAAO,SAASE,OAAT,CAAiBC,SAAjB,EAAmD;AACtD,SAAOA,SAAS,EAAEJ,GAAX,CAAgBC,KAAD,IAAWA,KAAK,CAACC,KAAhC,CAAP;AACH;AAOD,OAAO,MAAMG,cAAc,GAAG,CAAC;AACIC,EAAAA,IADJ;AAEIC,EAAAA,cAFJ;AAGI,KAAGC;AAHP,CAAD,KAI4B;AACtD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA;AAArB,MAA+BtB,cAAc,EAAnD;AACA,QAAM;AAAES,IAAAA,MAAF;AAAUc,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA6BzB,aAAa,CAAC;AAC7CkB,IAAAA,IAD6C;AAE7CI,IAAAA;AAF6C,GAAD,CAAhD;AAIA,QAAMI,aAAgE,GAClExB,QAAQ,CAAC;AAAEoB,IAAAA,OAAF;AAAWJ,IAAAA;AAAX,GAAD,CADZ;AAGAnB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AAClBJ,IAAAA,KAAK,CAAC;AACF,OAACL,IAAD,GAAQ,CAAC;AAAEJ,QAAAA,KAAK,EAAE;AAAT,OAAD;AADN,KAAD,CAAL;AAGH,GAJD,EAIG,EAJH;AAKA,SACI,0CACKJ,MAAM,CAACE,GAAP,CAAW,CAAC;AAAEgB,IAAAA,EAAF;AAAMd,IAAAA;AAAN,GAAD,EAAgBe,KAAhB,KACR,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAED;AAArB,KACI,oBAAC,UAAD,QACI,oBAAC,SAAD;AACI,IAAA,EAAE,EAAEA,EADR;AAEI,IAAA,GAAG,EAAEP,QAAQ,EAFjB;AAGI,IAAA,IAAI,EAAG,GAAEH,IAAK,IAAGW,KAAM,SAH3B;AAII,IAAA,YAAY,EAAEf;AAJlB,KAKQM,IALR,EADJ,EAQI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAEf,aAAa,CAACyB,IAD3B;AAEI,IAAA,OAAO,EAAE,MAAML,MAAM,CAACI,KAAD,CAFzB;AAGI,IAAA,QAAQ,EAAE,CAAC,CAHf;AAII,kBAAW,QAJf;AAKI,IAAA,UAAU,EAAEA,KAAK,KAAKnB,MAAM,CAACC,MAAP,GAAgB;AAL1C,KAOI,oBAAC,eAAD,OAPJ,CARJ,CADJ,EAmBKkB,KAAK,KAAKnB,MAAM,CAACC,MAAP,GAAgB,CAA1B,IACG,oBAAC,MAAD;AACI,IAAA,OAAO,EAAEN,aAAa,CAACyB,IAD3B;AAEI,IAAA,OAAO,EAAE,MAAMN,MAAM,CAAC,EAAD,CAFzB;AAGI,IAAA,QAAQ,EAAE,CAAC,CAHf;AAII,kBAAW,KAJf;AAKI,IAAA,UAAU,EAAEJ,IAAI,CAACW,UAAL,IAAmB,CAACL,aAAa,GAAGG,KAAH,CAAb,EAAwBf;AAL5D,KAOI,oBAAC,cAAD,OAPJ,OAOwB,KAPxB,CApBR,CADH,CADL,CADJ;AAqCH,CAvDM","sourcesContent":["//import React, { Fragment, useEffect } from \"react\";\r\nimport * as React from \"react\";\r\nimport { useFieldArray, useFormContext, useWatch } from \"react-hook-form\";\r\nimport {\r\n    TextInput,\r\n    Button,\r\n    ButtonVariant,\r\n    TextInputProps,\r\n    InputGroup,\r\n} from \"@patternfly/react-core\";\r\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\r\n\r\nexport type MultiLine = {\r\n    value: string;\r\n};\r\n\r\nexport function convertToMultiline(fields: string[]): MultiLine[] {\r\n    return (fields && fields.length > 0 ? fields : [\"\"]).map((field) => {\r\n        return { value: field };\r\n    });\r\n}\r\n\r\nexport function toValue(formValue: MultiLine[]): string[] {\r\n    return formValue?.map((field) => field.value);\r\n}\r\n\r\nexport type MultiLineInputProps = Omit<TextInputProps, \"form\"> & {\r\n    name: string;\r\n    addButtonLabel?: string;\r\n};\r\n\r\nexport const MultiLineInput = ({\r\n                                   name,\r\n                                   addButtonLabel,\r\n                                   ...rest\r\n                               }: MultiLineInputProps) => {\r\n    const { register, control, reset } = useFormContext();\r\n    const { fields, append, remove } = useFieldArray({\r\n        name,\r\n        control,\r\n    });\r\n    const currentValues: { [name: string]: { value: string } } | undefined =\r\n        useWatch({ control, name });\r\n\r\n    React.useEffect(() => {\r\n        reset({\r\n            [name]: [{ value: \"\" }],\r\n        });\r\n    }, []);\r\n    return (\r\n        <>\r\n            {fields.map(({ id, value }, index) => (\r\n                <React.Fragment key={id}>\r\n                    <InputGroup>\r\n                        <TextInput\r\n                            id={id}\r\n                            ref={register()}\r\n                            name={`${name}[${index}].value`}\r\n                            defaultValue={value}\r\n                            {...rest}\r\n                        />\r\n                        <Button\r\n                            variant={ButtonVariant.link}\r\n                            onClick={() => remove(index)}\r\n                            tabIndex={-1}\r\n                            aria-label='remove'\r\n                            isDisabled={index === fields.length - 1}\r\n                        >\r\n                            <MinusCircleIcon />\r\n                        </Button>\r\n                    </InputGroup>\r\n                    {index === fields.length - 1 && (\r\n                        <Button\r\n                            variant={ButtonVariant.link}\r\n                            onClick={() => append({})}\r\n                            tabIndex={-1}\r\n                            aria-label='add'\r\n                            isDisabled={rest.isDisabled || !currentValues?.[index]?.value}\r\n                        >\r\n                            <PlusCircleIcon /> {'add'}\r\n                        </Button>\r\n                    )}\r\n                </React.Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n};"],"file":"MultiLineInput.js"}