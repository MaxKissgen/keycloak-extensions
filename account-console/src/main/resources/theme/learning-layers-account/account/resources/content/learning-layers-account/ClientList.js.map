{"version":3,"sources":["../../../src/app/content/learning-layers-account/ClientList.tsx"],"names":["React","Button","DataList","DataListCell","DataListItem","DataListItemCells","DataListItemRow","DataListToggle","Grid","GridItem","Msg","AccountServiceContext","MinusCircleIcon","TrashIcon","ContentAlert","ClientList","Component","constructor","props","context","state","isRowOpen","clients","fetchClients","url","authUrl","realm","doGet","then","response","data","setState","Array","length","fill","elementId","item","client","clientId","getClientManagementLink","handleCreate","window","location","hash","handleDeleteClient","doDelete","ok","success","warning","status","statusText","handleUnlinkClient","handleManageClient","render","visibility","map","appIndex","name","description"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody, DataList, DataListCell, DataListContent, DataListItem, DataListItemCells, DataListItemRow, DataListToggle,\r\n    EmptyState,\r\n    EmptyStateBody,\r\n    EmptyStateVariant, Form,\r\n    Grid,\r\n    GridItem,\r\n    Title\r\n} from '@patternfly/react-core';\r\nimport { ContentPage } from '../ContentPage'\r\nimport { Msg } from '../../widgets/Msg'\r\nimport { AccountServiceContext } from '../../account-service/AccountServiceContext';\r\nimport { HttpResponse } from '../../account-service/account.service'\r\nimport {ExternalLinkAltIcon, MinusCircleIcon, TrashIcon} from \"@patternfly/react-icons\";\r\nimport {ContentAlert} from \"../ContentAlert\";\r\nimport {Link, Route, RouteComponentProps} from \"react-router-dom\";\r\n\r\n// can be found at /keycloak.v2/account/index.ftl\r\ndeclare const authUrl: string;\r\ndeclare const realm: string;\r\n\r\nexport interface ClientsPageProps {\r\n}\r\n\r\nexport interface ClientsPageState {\r\n    // isRowOpen already here for later use and expanding the list of clients\r\n    isRowOpen: boolean[];\r\n    clients: Client[];\r\n}\r\n\r\nexport interface Client {\r\n    clientId: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\n\r\nexport class ClientList extends React.Component<ClientsPageProps, ClientsPageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n    public constructor(props: ClientsPageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n        this.state = {\r\n            isRowOpen: [],\r\n            clients: []\r\n        };\r\n\r\n        this.fetchClients();\r\n    }\r\n\r\n\r\n\r\n    private fetchClients(): void {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/clients'\r\n        this.context!.doGet<Client[]>(url).then((response: HttpResponse<Client[]>) => {\r\n            const clients = response.data || [];\r\n            this.setState({\r\n                isRowOpen: new Array(clients.length).fill(false),\r\n                clients: clients\r\n            });\r\n        });\r\n    }\r\n\r\n    private elementId(item: string, client: Client): string {\r\n        return `application-${item}-${client.clientId}`;\r\n    }\r\n\r\n    // maybe useless, might deleted but currently creates link to request client information of given client\r\n    private getClientManagementLink(clientId: string): string {\r\n        return authUrl + 'realms/' + realm + '/userClientAdministration/client/' + clientId;\r\n    }\r\n\r\n    // TODO: create\r\n    private handleCreate() {\r\n        return window.location.hash = 'userClients/client'\r\n        //window.open('https://tenor.com/8F2P.gif');\r\n    }\r\n\r\n    private handleDeleteClient(clientId: string) {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/' + clientId;\r\n        this.context!.doDelete(url).then((response: HttpResponse) => {\r\n            if(response.ok) {\r\n                this.fetchClients();\r\n                ContentAlert.success('Client successfully deleted');\r\n            } else {\r\n                ContentAlert.warning('Client could not be deleted.\\n' +  response.status + ' ' + response.statusText);\r\n            }\r\n        })\r\n    }\r\n\r\n    private handleUnlinkClient(clientId: string) {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/access/' + clientId;\r\n        this.context!.doDelete(url).then((response: HttpResponse) => {\r\n            if (response.ok) {\r\n                this.fetchClients();\r\n                ContentAlert.success('Client successfully unlinked from you');\r\n            } else {\r\n                ContentAlert.warning('Client could not be unlinked.\\n' + response.status + ' ' + response.statusText);\r\n            }\r\n        })\r\n    }\r\n\r\n    private handleManageClient(clientId: string) {\r\n        // browserHistory.push\r\n        // let url = baseUrl + 'userClients/client'\r\n        // window.open()\r\n        window.location.hash = 'userClients/client/' + clientId;\r\n    }\r\n\r\n    // TODO: set correct window.open() link\r\n    public render(): React.ReactNode {\r\n        return (\r\n            <div>\r\n                <Grid>\r\n                    <GridItem offset={12}>\r\n                        <Button id=\"create-btn\" variant=\"control\" onClick={this.handleCreate}>\r\n                            <Msg msgKey=\"doCreateClient\" />\r\n                        </Button>\r\n                    </GridItem>\r\n                </Grid>\r\n                <DataList id=\"client-list\" aria-label=\"Clients\" isCompact>\r\n                    <DataListItem id=\"client-list-header\" aria-labelledby=\"Column names\">\r\n                        <DataListItemRow>\r\n                            // invisible toggle allows headings to line up properly\r\n                            <span style={{ visibility: 'hidden' }}>\r\n                                <DataListToggle\r\n                                    isExpanded={false}\r\n                                    id='applications-list-header-invisible-toggle'\r\n                                    aria-controls=\"hidden\"\r\n                                />\r\n                            </span>\r\n                            <DataListItemCells\r\n                                dataListCells={[\r\n                                    <DataListCell key='client-list-client-id-header' width={2}>\r\n                                        <strong><Msg msgKey='clientId' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-name-header' width={2}>\r\n                                        <strong><Msg msgKey='clientName' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-description-header' width={2}>\r\n                                        <strong><Msg msgKey='clientDescription' /></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-delete-header' width={1}>\r\n                                        <strong><Msg msgKey='clientDelete'/></strong>\r\n                                    </DataListCell>,\r\n                                    <DataListCell key='client-list-client-unlink-header' width={1}>\r\n                                        <strong><Msg msgKey='clientUnlink'/></strong>\r\n                                    </DataListCell>\r\n                                ]}\r\n                            />\r\n                        </DataListItemRow>\r\n                    </DataListItem>\r\n                    {this.state.clients.map((client: Client, appIndex: number) => {\r\n                        return (\r\n                            <DataListItem id={this.elementId(\"client-id\", client)} key={'client-' + appIndex} aria-labelledby=\"client-list\" isExpanded={this.state.isRowOpen[appIndex]}>\r\n                                <DataListItemRow>\r\n                                    {/*<DataListToggle*/}\r\n                                    {/*    onClick={() => this.onToggle(appIndex)}*/}\r\n                                    {/*    isExpanded={this.state.isRowOpen[appIndex]}*/}\r\n                                    {/*    id={this.elementId('toggle', application)}*/}\r\n                                    {/*    aria-controls={this.elementId(\"expandable\", application)}*/}\r\n                                    {/*/>*/}\r\n                                    <DataListItemCells\r\n                                        dataListCells={[\r\n                                            <DataListCell id={this.elementId('id', client)} width={2} key={'id-' + appIndex}>\r\n                                                <Button component=\"a\" variant=\"link\" onClick={() => this.handleManageClient(client.clientId)}>\r\n                                                    { client.clientId }\r\n                                                </Button>\r\n                                                {/*<Link to={{*/}\r\n                                                {/*    pathname: '/userClients/client',*/}\r\n                                                {/*    state: client.clientId*/}\r\n                                                {/*}}>*/}\r\n                                                {/*    { client.clientId }*/}\r\n                                                {/*</Link>*/}\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('name', client)} width={2} key={'name-' + appIndex}>\r\n                                                { client.name || '---' }\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('description', client)} width={2} key={'description-' + appIndex}>\r\n                                                { client.description || '---'}\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('delete', client)} width={1} key={'delete-' + appIndex}>\r\n                                                <Button component=\"a\" variant=\"danger\" onClick={() => this.handleDeleteClient(client.clientId)}>\r\n                                                    <TrashIcon/>\r\n                                                </Button>\r\n                                            </DataListCell>,\r\n                                            <DataListCell id={this.elementId('unlink', client)} width={1} key={'unlink-' + appIndex}>\r\n                                                <Button component=\"a\" variant=\"secondary\" onClick={() => this.handleUnlinkClient(client.clientId)}>\r\n                                                    <MinusCircleIcon/>\r\n                                                </Button>\r\n                                            </DataListCell>\r\n                                        ]}\r\n                                    />\r\n                                </DataListItemRow>\r\n                            </DataListItem>\r\n                        )\r\n                    })}\r\n                </DataList>\r\n            </div>\r\n        );\r\n    };\r\n}"],"file":"ClientList.js"}