{"version":3,"sources":["../../src/app/keycloak-service/keycloak.service.ts"],"names":["KeycloakService","constructor","keycloak","keycloakAuth","authenticated","audiencePresent","tokenParsed","audience","Array","isArray","indexOf","login","options","logout","redirectUri","baseUrl","account","accountManagement","authServerUrl","charAt","length","realm","getToken","Promise","resolve","reject","token","updateToken","success","error"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAqBA,OAAO,MAAMA,eAAN,CAAsB;AAGlBC,EAAAA,WAAP,CAAmBC,QAAnB,EAA6C;AAAA;;AACzC,SAAKC,YAAL,GAAoBD,QAApB;AACH;;AAEME,EAAAA,aAAP,GAAgC;AAC5B,WAAO,KAAKD,YAAL,CAAkBC,aAAlB,GAAkC,KAAKD,YAAL,CAAkBC,aAApD,GAAoE,KAA3E;AACH;;AAEMC,EAAAA,eAAP,GAAkC;AAC9B,QAAI,KAAKF,YAAL,CAAkBG,WAAtB,EAAmC;AAC/B,YAAMC,QAAQ,GAAG,KAAKJ,YAAL,CAAkBG,WAAlB,CAA8B,KAA9B,CAAjB;AACA,aAAOC,QAAQ,KAAK,SAAb,IAA2BC,KAAK,CAACC,OAAN,CAAcF,QAAd,KAA2BA,QAAQ,CAACG,OAAT,CAAiB,SAAjB,KAA+B,CAA5F;AACH;;AACD,WAAO,KAAP;AACH;;AAEMC,EAAAA,KAAP,CAAaC,OAAb,EAAmD;AAC/C,SAAKT,YAAL,CAAkBQ,KAAlB,CAAwBC,OAAxB;AACH;;AAEMC,EAAAA,MAAP,CAAcC,WAAmB,GAAGC,OAApC,EAAmD;AAC/C,SAAKZ,YAAL,CAAkBU,MAAlB,CAAyB;AAACC,MAAAA,WAAW,EAAEA;AAAd,KAAzB;AACH;;AAEME,EAAAA,OAAP,GAAuB;AACnB,SAAKb,YAAL,CAAkBc,iBAAlB;AACH;;AAEMC,EAAAA,aAAP,GAA2C;AACvC,UAAMA,aAAa,GAAG,KAAKf,YAAL,CAAkBe,aAAxC;AACA,WAAOA,aAAa,CAAEC,MAAf,CAAsBD,aAAa,CAAEE,MAAf,GAAwB,CAA9C,MAAqD,GAArD,GAA2DF,aAA3D,GAA2EA,aAAa,GAAG,GAAlG;AACH;;AAEMG,EAAAA,KAAP,GAAmC;AAC/B,WAAO,KAAKlB,YAAL,CAAkBkB,KAAzB;AACH;;AAEMC,EAAAA,QAAP,GAAmC;AAC/B,WAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,UAAI,KAAKtB,YAAL,CAAkBuB,KAAtB,EAA6B;AACzB,aAAKvB,YAAL,CACKwB,WADL,CACiB,CADjB,EAEKC,OAFL,CAEa,MAAM;AACXJ,UAAAA,OAAO,CAAC,KAAKrB,YAAL,CAAkBuB,KAAnB,CAAP;AACH,SAJL,EAKKG,KALL,CAKW,MAAM;AACTJ,UAAAA,MAAM,CAAC,yBAAD,CAAN;AACH,SAPL;AAQH,OATD,MASO;AACHA,QAAAA,MAAM,CAAC,eAAD,CAAN;AACH;AACJ,KAbM,CAAP;AAcH;;AAvDwB","sourcesContent":["/*\r\n * Copyright 2017 Red Hat, Inc. and/or its affiliates\r\n * and other contributors as indicated by the @author tags.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport {KeycloakLoginOptions} from \"../../../../../../../../../../adapters/oidc/js/src/main/resources/keycloak\";\r\n\r\ndeclare const baseUrl: string;\r\nexport type KeycloakClient = Keycloak.KeycloakInstance;\r\n\r\nexport class KeycloakService {\r\n    private keycloakAuth: KeycloakClient;\r\n\r\n    public constructor(keycloak: KeycloakClient) {\r\n        this.keycloakAuth = keycloak;\r\n    }\r\n\r\n    public authenticated(): boolean {\r\n        return this.keycloakAuth.authenticated ? this.keycloakAuth.authenticated : false;\r\n    }\r\n\r\n    public audiencePresent(): boolean {\r\n        if (this.keycloakAuth.tokenParsed) {\r\n            const audience = this.keycloakAuth.tokenParsed['aud'];\r\n            return audience === 'account' || (Array.isArray(audience) && audience.indexOf('account') >= 0);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public login(options?: KeycloakLoginOptions): void {\r\n        this.keycloakAuth.login(options);\r\n    }\r\n\r\n    public logout(redirectUri: string = baseUrl): void {\r\n        this.keycloakAuth.logout({redirectUri: redirectUri});\r\n    }\r\n\r\n    public account(): void {\r\n        this.keycloakAuth.accountManagement();\r\n    }\r\n\r\n    public authServerUrl(): string | undefined {\r\n        const authServerUrl = this.keycloakAuth.authServerUrl;\r\n        return authServerUrl!.charAt(authServerUrl!.length - 1) === '/' ? authServerUrl : authServerUrl + '/';\r\n    }\r\n\r\n    public realm(): string | undefined {\r\n        return this.keycloakAuth.realm;\r\n    }\r\n\r\n    public getToken(): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            if (this.keycloakAuth.token) {\r\n                this.keycloakAuth\r\n                    .updateToken(5)\r\n                    .success(() => {\r\n                        resolve(this.keycloakAuth.token as string);\r\n                    })\r\n                    .error(() => {\r\n                        reject('Failed to refresh token');\r\n                    });\r\n            } else {\r\n                reject('Not logged in');\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"file":"keycloak.service.js"}