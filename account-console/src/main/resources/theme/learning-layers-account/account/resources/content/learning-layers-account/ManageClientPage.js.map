{"version":3,"sources":["../../../src/app/content/learning-layers-account/ManageClientPage.tsx"],"names":["React","AccountServiceContext","ContentPage","withRouter","Msg","ActionGroup","Button","ButtonVariant","Expandable","Form","FormGroup","Grid","GridItem","InputGroup","Select","SelectOption","SelectVariant","Switch","Text","TextInput","ContentAlert","MinusCircleIcon","PlusCircleIcon","pkceChallence","accessTypes","emptyClientFields","clientId","name","description","secret","undefined","enabled","alwaysDisplayInConsole","consentRequired","bearerOnly","publicClient","standardFlowEnabled","implicitFlowEnabled","directAccessGrantsEnabled","serviceAccountsEnabled","rootUrl","redirectUris","baseUrl","adminUrl","webOrigins","attributes","ManageClient","Component","constructor","props","context","value","event","target","currentTarget","setState","client","state","tmp","type","parseInt","toString","split","console","log","accessTypeExpanded","_event","selection","confidential","accessTypeSelected","public","bearer_only","warning","pkceChallengeExpanded","pkceChallengeSelected","uriType","tmpArr","push","index","isExtended","navigator","clipboard","writeText","adminToken","success","localize","noClient","window","location","hash","requestClient","match","params","id","preventDefault","form","isValid","checkValidity","reqData","url","authUrl","realm","doPost","then","response","ok","reload","status","statusText","info","none","doGet","responseData","data","clientRep","setAccessType","setPKCEChallenge","pubClient","bearer","challenge","S256","plain","removeUri","splice","render","handleCopyAdminTok","handleSubmit","handleChange","single","toggleAccessType","selectAccessType","handleAttrChange","length","map","uri","handleArrayChange","link","addUri","origin","onToggle","togglePKCEChallenge","selectPKCEChallenge","handleCancel","ManageClientPage"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {AccountServiceContext} from \"../../account-service/AccountServiceContext\";\r\nimport {ContentPage} from \"../ContentPage\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {Msg} from \"../../widgets/Msg\";\r\nimport {\r\n    ActionGroup,\r\n    Button, ButtonVariant, Expandable,\r\n    Form,\r\n    FormGroup, Grid, GridItem, InputGroup,\r\n    Select,\r\n    SelectOption,\r\n    SelectVariant,\r\n    Switch, Text,\r\n    TextInput\r\n} from \"@patternfly/react-core\";\r\nimport {ClientRepresentation} from \"./ClientRepresentation\";\r\nimport {HttpResponse} from \"../../account-service/account.service\";\r\nimport {ContentAlert} from \"../ContentAlert\";\r\nimport {MinusCircleIcon, PlusCircleIcon} from \"@patternfly/react-icons\";\r\n\r\n// can be found at /keycloak.v2/account/index.ftl\r\ndeclare const authUrl: string;\r\ndeclare const realm: string;\r\n\r\ninterface routeParams {\r\n    id: string;\r\n}\r\n\r\nenum pkceChallence {\r\n    'S256' = 'S256',\r\n    'plain' = 'plain',\r\n    'none' = 'none'\r\n}\r\n\r\nenum accessTypes {\r\n    'confidential' = 'confidential',\r\n    'public' = 'public',\r\n    'bearer_only' = 'bearer-only',\r\n}\r\n\r\nexport interface ManagePageProps extends RouteComponentProps<routeParams> {\r\n}\r\n\r\nexport interface ManagePageState {\r\n    noClient: boolean;\r\n    isExtended: boolean[];\r\n    accessTypeExpanded: boolean;\r\n    accessTypeSelected: accessTypes;\r\n    pkceChallengeExpanded: boolean;\r\n    pkceChallengeSelected: pkceChallence;\r\n    adminToken: string;\r\n    client: ClientRepresentation;\r\n}\r\n\r\ninterface ClientResponse {\r\n    adminToken: string;\r\n    clientRep: ClientRepresentation;\r\n}\r\n\r\nexport const emptyClientFields = {\r\n    clientId: '',\r\n    name: '',\r\n    description: '',\r\n    secret: undefined,\r\n    enabled: true,\r\n    alwaysDisplayInConsole: false,\r\n    consentRequired: false,\r\n    bearerOnly: false,\r\n    publicClient: true,\r\n    standardFlowEnabled: true,\r\n    implicitFlowEnabled: false,\r\n    directAccessGrantsEnabled: true,\r\n    serviceAccountsEnabled: false,\r\n\r\n    rootUrl: '',\r\n    redirectUris: [],\r\n    baseUrl: '',\r\n    adminUrl: '',\r\n    webOrigins: [],\r\n\r\n    // defaultClientScopes: [],\r\n    // optionalClientScopes: [],\r\n\r\n    attributes: {\r\n        \"backchannel.logout.url\": '',\r\n        \"backchannel.logout.session.required\": 'true',\r\n        \"backchannel.logout.revoke.offline.tokens\": 'false',\r\n        \"oauth2.device.authorization.grant.enabled\": 'false',\r\n\r\n        \"access.token.lifespan\": '',\r\n        \"client.session.idle.timeout\": '',\r\n        \"client.session.max.lifespan\": '',\r\n        \"client.offline.session.idle.timeout\": '',\r\n        \"client.offline.session.max.lifespan\": '',\r\n        \"tls.client.certificate.bound.access.tokens\": '',\r\n        \"pkce.code.challenge.method\": undefined,\r\n        \"use.refresh.tokens\": 'true',\r\n        \"client_credentials.use_refresh_token\": 'false',\r\n        \"exclude.session.state.from.auth.response\": 'false',\r\n    }\r\n}\r\n\r\n\r\nexport class ManageClient extends React.Component<ManagePageProps, ManagePageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n\r\n    public constructor(props: ManagePageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n        this.state = {\r\n            noClient: true,\r\n            isExtended: [false, false],\r\n            accessTypeExpanded: false,\r\n            accessTypeSelected: accessTypes.public,\r\n            pkceChallengeExpanded: false,\r\n            pkceChallengeSelected: pkceChallence.none,\r\n            adminToken: '',\r\n            client: emptyClientFields,\r\n        }\r\n\r\n        if (this.props.match.params.id !== '' && this.props.match.params.id !== undefined) {\r\n            this.requestClient(this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    private requestClient(clientId: string): void {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/' + clientId;\r\n        this.context!.doGet<ClientResponse>(url).then((response: HttpResponse<ClientResponse>) => {\r\n            if (response.ok){\r\n                const responseData = response.data ||  {adminToken: '', clientRep: emptyClientFields};\r\n                console.log(responseData)\r\n                this.setState({\r\n                    noClient: false,\r\n                    isExtended: [false, false],\r\n                    accessTypeSelected: this.setAccessType(responseData.clientRep.publicClient, responseData.clientRep.bearerOnly),\r\n                    pkceChallengeSelected: this.setPKCEChallenge(responseData.clientRep.attributes[\"pkce.code.challenge.method\"]),\r\n                    adminToken: responseData.adminToken,\r\n                    client: responseData.clientRep,\r\n                });\r\n                console.log(\"got client data:\");\r\n                console.log(this.state)\r\n                if (this.state.client == emptyClientFields){\r\n                    console.log(\"got no data for client\")\r\n                    ContentAlert.warning('No data was send for the client ' + clientId)\r\n                }\r\n            }\r\n            else {\r\n                ContentAlert.warning('You have no access to the client!.\\n' +  response.status + ' ' + response.statusText);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private setAccessType(pubClient: boolean, bearer: boolean): accessTypes {\r\n        if (pubClient && bearer) {\r\n            ContentAlert.warning('Client is configured to be public and bearer-only. This is seems to be an error.');\r\n            return accessTypes.bearer_only;\r\n        } else if (pubClient) {\r\n            return accessTypes.public;\r\n        } else if (bearer) {\r\n            return accessTypes.bearer_only;\r\n        } else {\r\n            return accessTypes.confidential;\r\n        }\r\n    }\r\n\r\n    private setPKCEChallenge(challenge?: string): pkceChallence {\r\n        switch (challenge) {\r\n            case undefined:\r\n                return pkceChallence.none;\r\n            case 'S256':\r\n                return pkceChallence.S256;\r\n            case 'plain':\r\n                return pkceChallence.plain;\r\n            default:\r\n                ContentAlert.warning(\"pkce challenge was not correctly defined. Set to default value \\\"none\\\"\");\r\n                console.log(\"pkce challenge was not correctly defined. Set to default value \\\"none\\\"\");\r\n                return pkceChallence.none\r\n        }\r\n    }\r\n\r\n\r\n    private handleChange = (value: any, event: React.FormEvent<HTMLInputElement>) => {\r\n        const target = event.currentTarget;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            client: {...this.state.client, [name]: value }\r\n        });\r\n    }\r\n\r\n    private handleAttrChange = (value: any, event: React.FormEvent<HTMLInputElement>) => {\r\n        const target = event.currentTarget;\r\n        const name = target.name;\r\n\r\n        let tmp = this.state.client.attributes;\r\n        if(target.type == 'number'){\r\n            tmp[name] = (parseInt(value)*60).toString();\r\n        } else {\r\n            tmp[name] = value.toString();\r\n        }\r\n        this.setState({\r\n            client: { ...this.state.client, attributes: tmp }\r\n        })\r\n    }\r\n\r\n    private handleArrayChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\r\n        const target = event.currentTarget;\r\n        const name = target.name.split('-');\r\n        let tmp = []\r\n        switch (name[0]) {\r\n            case 'redirectUris':\r\n                tmp = this.state.client.redirectUris\r\n                tmp[parseInt(name[1])] = value;\r\n                this.setState({\r\n                    client: {...this.state.client, redirectUris: tmp}\r\n                });\r\n                break;\r\n            case 'webOrigins':\r\n                tmp = this.state.client.webOrigins\r\n                tmp[parseInt(name[1])] = value;\r\n                this.setState({\r\n                    client: {...this.state.client, webOrigins: tmp}\r\n                });\r\n                break;\r\n            default:\r\n                console.log('Some not defined array should be fixed')\r\n        }\r\n    }\r\n\r\n    private toggleAccessType = (accessTypeExpanded: boolean) => {\r\n        this.setState({\r\n            accessTypeExpanded\r\n        })\r\n    }\r\n\r\n    private selectAccessType = (_event: React.MouseEvent | React.ChangeEvent, selection: accessTypes): void => {\r\n        switch (selection) {\r\n            case accessTypes.confidential:\r\n                this.setState({\r\n                    accessTypeSelected: selection,\r\n                    accessTypeExpanded: false,\r\n                    client: { ...this.state.client, publicClient: false, bearerOnly: false }\r\n                });\r\n                break;\r\n            case accessTypes.public:\r\n                this.setState({\r\n                    accessTypeSelected: selection,\r\n                    accessTypeExpanded: false,\r\n                    client: { ...this.state.client, publicClient: true, bearerOnly: false }\r\n                });\r\n                break;\r\n            case accessTypes.bearer_only:\r\n                this.setState({\r\n                    accessTypeSelected: selection,\r\n                    accessTypeExpanded: false,\r\n                    client: { ...this.state.client, publicClient: false, bearerOnly: true }\r\n                });\r\n                break;\r\n            default:\r\n                console.log(\"Error: selected value is neither confidential, public or bearer_only. Value is instead: \" + selection)\r\n                ContentAlert.warning('Something went wrong when selection the access type.')\r\n        }\r\n    }\r\n\r\n    private togglePKCEChallenge = (pkceChallengeExpanded: boolean) => {\r\n        this.setState({\r\n            pkceChallengeExpanded\r\n        })\r\n    }\r\n\r\n    private selectPKCEChallenge = (_event: React.MouseEvent | React.ChangeEvent, selection: pkceChallence): void => {\r\n        let tmp = this.state.client.attributes;\r\n        tmp[\"pkce.code.challenge.method\"] = selection;\r\n\r\n        this.setState({\r\n            pkceChallengeExpanded: false,\r\n            pkceChallengeSelected: selection,\r\n            client: { ...this.state.client, attributes: tmp }\r\n        })\r\n    }\r\n\r\n    private addUri = (uriType: string): void => {\r\n        let tmpArr = []\r\n        switch (uriType) {\r\n            case 'redirectUris':\r\n                tmpArr = this.state.client.redirectUris;\r\n                tmpArr.push('');\r\n                this.setState({\r\n                    client: { ...this.state.client, redirectUris: tmpArr }\r\n                })\r\n                break;\r\n            case 'webOrigins':\r\n                tmpArr = this.state.client.webOrigins;\r\n                tmpArr.push('');\r\n                this.setState({\r\n                    client: { ...this.state.client, webOrigins: tmpArr }\r\n                })\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    private removeUri(index: number, uriType: string): void {\r\n        let tmpArr = [];\r\n        switch (uriType) {\r\n            case 'redirectUris':\r\n                console.log(this.state.client.redirectUris);\r\n                tmpArr = this.state.client.redirectUris;\r\n                tmpArr.splice(index, 1);\r\n                console.log(tmpArr);\r\n                this.setState({\r\n                    client: { ...this.state.client, redirectUris: tmpArr }\r\n                });\r\n                break;\r\n            case 'webOrigins':\r\n                tmpArr = this.state.client.webOrigins;\r\n                tmpArr.splice(index, 1);\r\n                this.setState({\r\n                    client: { ...this.state.client, webOrigins: tmpArr }\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onToggle = (index: number): void => {\r\n        let tmp = this.state.isExtended;\r\n        tmp[index] = !tmp[index];\r\n        this.setState({\r\n            isExtended: tmp\r\n        });\r\n    }\r\n\r\n    private handleCopyAdminTok = (): void => {\r\n        navigator.clipboard.writeText(this.state.adminToken)\r\n        ContentAlert.success(Msg.localize('copiedToClipboard'))\r\n    }\r\n\r\n    private handleCancel = (): void => {\r\n        if(this.state.noClient) {\r\n            window.location.hash = 'userClients';\r\n        } else {\r\n            this.requestClient(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        const form = event.target as HTMLFormElement;\r\n        const isValid = form.checkValidity();\r\n        console.log(this.state)\r\n        if (isValid) {\r\n            const reqData = this.state.client;\r\n            // DEBUGGING\r\n            // console.log(\"Submit client:\");\r\n            // console.log(reqData);\r\n            if (this.state.noClient) {\r\n                if(reqData.rootUrl) {\r\n                    reqData.redirectUris.push(reqData.rootUrl + '/*');\r\n                    reqData.webOrigins.push(reqData.rootUrl);\r\n                    reqData.adminUrl = reqData.rootUrl;\r\n                }\r\n                let url = authUrl + 'realms/' + realm + '/userClientAdministration/create'\r\n                this.context!.doPost<HttpResponse>(url, reqData)\r\n                    .then((response: HttpResponse) => {\r\n                        if(response.ok) {\r\n                            ContentAlert.success(Msg.localize('successfullClientCreation'));\r\n                            window.location.hash = 'userClients/client/' + reqData.clientId;\r\n                            window.location.reload();\r\n                        } else {\r\n                            ContentAlert.warning('Could not create client.\\n' + response.status + ' ' + response.statusText)\r\n                            console.log(response.status + ' ' + response.statusText)\r\n                        }\r\n                    });\r\n            } else {\r\n                let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/' + this.state.client.id;\r\n                // DEBUGGING\r\n                // console.log(\"Changing existent client\")\r\n                // console.log(reqData);\r\n                this.context!.doPost<HttpResponse>(url, reqData)\r\n                    .then((response: HttpResponse) => {\r\n                        if (response.ok) {\r\n                            ContentAlert.success(Msg.localize('successfullClientUpdate'));\r\n                        } else {\r\n                            ContentAlert.warning('Could not change client.\\n' + response.status + ' ' + response.statusText)\r\n                            console.log(response.status + ' ' + response.statusText)\r\n                        }\r\n                    });\r\n            }\r\n        } else {\r\n            // TODO: improve alerts/warnings at invalid input\r\n            ContentAlert.info(\"A client needs at least a clientId, one valid redirectUri. Confidential clients also need a client secret.\\n\" +\r\n                \" Note that you should begin urls with http:// or https://?\")\r\n            // DEBUGGING\r\n            // console.log('HTMLFormElement not valid')\r\n            // console.log(form.querySelectorAll(':invalid'))\r\n        }\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const client: ClientRepresentation = this.state.client;\r\n        return(\r\n            <ContentPage title={(this.state.noClient ? 'Create new client' : Msg.localize(\"manageClientTitle\") + ' ' + this.state.client.clientId)}\r\n                         introMessage={(this.state.noClient ? '' : Msg.localize(\"manageClientDescription\"))}>\r\n                {!this.state.noClient && (\r\n                    <React.Fragment>\r\n                        <Grid>\r\n                            <GridItem offset={12}>\r\n                                <Button id=\"admin-token-btn\" variant=\"tertiary\" onClick={this.handleCopyAdminTok}>\r\n                                    <Msg msgKey=\"doCopyAdminToken\" />\r\n                                </Button>\r\n                            </GridItem>\r\n                        </Grid>\r\n                        <div className=\"pf-c-divider pf-m-vertical pf-m-inset-md\" role=\"separator\"> </div>\r\n                    </React.Fragment>\r\n                )}\r\n                <Form isHorizontal onSubmit={event => this.handleSubmit(event)}>\r\n                    {this.state.noClient ?\r\n                        <React.Fragment>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientId')}\r\n                                isRequired\r\n                                fieldId='client-id'\r\n                            >\r\n                                <TextInput\r\n                                    isRequired\r\n                                    type='text'\r\n                                    id='client-id'\r\n                                    name='clientId'\r\n                                    maxLength={254}\r\n                                    value={client.clientId}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientRootUrl')}\r\n                                fieldId='client-root-url'\r\n                            >\r\n                                <TextInput\r\n                                    type='url'\r\n                                    id='client-root-url'\r\n                                    name='rootUrl'\r\n                                    maxLength={254}\r\n                                    value={client.rootUrl ? client.rootUrl : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </React.Fragment>\r\n                        :\r\n                        <React.Fragment>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientId')}\r\n                                isRequired\r\n                                fieldId='client-id'\r\n                            >\r\n                                <TextInput\r\n                                    isRequired\r\n                                    type='text'\r\n                                    id='client-id'\r\n                                    name='clientId'\r\n                                    maxLength={254}\r\n                                    value={client.clientId}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientName')}\r\n                                fieldId='client-name'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='client-name'\r\n                                    name='name'\r\n                                    maxLength={254}\r\n                                    value={client.name ? client.name : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientDescription')}\r\n                                fieldId='client-description'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='client-description'\r\n                                    name='description'\r\n                                    maxLength={254}\r\n                                    value={client.description ? client.description : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientSecret')}\r\n                                isRequired={!client.publicClient && !client.bearerOnly}\r\n                                fieldId='client-secret'\r\n                            >\r\n                                <TextInput\r\n                                    isRequired={!client.publicClient && !client.bearerOnly}\r\n                                    isDisabled={client.publicClient || client.bearerOnly}\r\n                                    type='text'\r\n                                    id='client-secret'\r\n                                    name='secret'\r\n                                    maxLength={254}\r\n                                    value={(!client.secret && (client.publicClient || client.bearerOnly)) ? 'This type of clients do not have secrets' : (!client.secret ? '' : client.secret) }\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientEnabled')}\r\n                                fieldId='client-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-enabled'\r\n                                    name='enabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.enabled}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientAlwaysDisplayInConsole')}\r\n                                fieldId='client-always-display-in-console'\r\n                            >\r\n                                <Switch\r\n                                    id='client-always-display-in-console'\r\n                                    name='alwaysDisplayInConsole'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.alwaysDisplayInConsole}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientConsentRequired')}\r\n                                fieldId='client-consent-required'\r\n                            >\r\n                                <Switch\r\n                                    id='client-consent-required'\r\n                                    name='consentRequired'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.consentRequired}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientAccessType')}\r\n                                fieldId='client-access-type'\r\n                            >\r\n                                <Select\r\n                                    direction='down'\r\n                                    variant={SelectVariant.single}\r\n                                    aria-label=\"Select the access type\"\r\n                                    onToggle={this.toggleAccessType}\r\n                                    onSelect={this.selectAccessType}\r\n                                    selections={this.state.accessTypeSelected}\r\n                                    isExpanded={this.state.accessTypeExpanded}\r\n                                >\r\n                                    {[\r\n                                        <SelectOption key={0} value={accessTypes.confidential}/>,\r\n                                        <SelectOption key={1} value={accessTypes.public}/>,\r\n                                        <SelectOption key={2} value={accessTypes.bearer_only}/>\r\n                                    ]}\r\n                                </Select>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientStandardFlowEnabled')}\r\n                                fieldId='client-standard-flow-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-standard-flow-enabled'\r\n                                    name='standardFlowEnabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.standardFlowEnabled}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientImplicitFlowEnabled')}\r\n                                fieldId='client-implicit-flow-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-implicit-flow-enabled'\r\n                                    name='implicitFlowEnabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.implicitFlowEnabled}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientDirectAccessGrantsEnabled')}\r\n                                fieldId='client-direct-access-grants-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-direct-access-grants-enabled'\r\n                                    name='directAccessGrantsEnabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.directAccessGrantsEnabled}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientServiceAccountsEnabled')}\r\n                                fieldId='client-service-accounts-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-service-accounts-enabled'\r\n                                    name='serviceAccountsEnabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.serviceAccountsEnabled}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientOauth2DeviceEnabled')}\r\n                                fieldId='client-oauth2-device-enabled'\r\n                            >\r\n                                <Switch\r\n                                    id='client-oauth2-device-enabled'\r\n                                    name='oauth2.device.authorization.grant.enabled'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.attributes[\"oauth2.device.authorization.grant.enabled\"] === 'true'}\r\n                                    onChange={this.handleAttrChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientRootUrl')}\r\n                                fieldId='client-root-url'\r\n                            >\r\n                                <TextInput\r\n                                    type='url'\r\n                                    id='client-root-url'\r\n                                    name='rootUrl'\r\n                                    maxLength={254}\r\n                                    value={client.rootUrl ? client.rootUrl : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize(\"clientRedirectUris\")}\r\n                                fieldId=\"client-redirect-uri\"\r\n                                isRequired\r\n                                // labelIcon={\r\n                                //     <HelpItem\r\n                                //         helpText=\"clients-help:validRedirectURIs\"\r\n                                //         forLabel={t(\"validRedirectUri\")}\r\n                                //         forID={t(`common:helpLabel`, { label: t(\"validRedirectUri\") })}\r\n                                //     />\r\n                                // }\r\n                            >\r\n                                {client.redirectUris.length > 1 ?\r\n                                    client.redirectUris.map((uri: string, index: number) => {\r\n                                        return (\r\n                                            <React.Fragment>\r\n                                                <InputGroup>\r\n                                                    <TextInput\r\n                                                        type='text'\r\n                                                        isRequired\r\n                                                        id='client-redirect-uri'\r\n                                                        name={'redirectUris-' + index}\r\n                                                        value={uri}\r\n                                                        onChange={this.handleArrayChange}\r\n                                                    />\r\n                                                    <Button\r\n                                                        variant={ButtonVariant.link}\r\n                                                        onClick={() => this.removeUri(index, 'redirectUris')}\r\n                                                        tabIndex={-1}\r\n                                                        aria-label='remove'\r\n                                                    >\r\n                                                        <MinusCircleIcon/>\r\n                                                    </Button>\r\n                                                </InputGroup>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                    }) :\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='text'\r\n                                            isRequired\r\n                                            id='client-redirect-uri'\r\n                                            name={'redirectUris-' + 0}\r\n                                            value={client.redirectUris[0] ? client.redirectUris[0] : ''}\r\n                                            onChange={this.handleArrayChange}\r\n                                        />\r\n                                        <Button\r\n                                            variant={ButtonVariant.link}\r\n                                            onClick={() => this.removeUri(0, 'redirectUris')}\r\n                                            tabIndex={-1}\r\n                                            aria-label='remove'\r\n                                            isDisabled={client.redirectUris.length !== 1}\r\n                                        >\r\n                                            <MinusCircleIcon/>\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                }\r\n                                <Button\r\n                                    variant={ButtonVariant.link}\r\n                                    onClick={() => this.addUri('redirectUris')}\r\n                                    tabIndex={-1}\r\n                                    ara-label='add'\r\n                                >\r\n                                    <PlusCircleIcon/> {'add URI'}\r\n                                </Button>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientBaseUrl')}\r\n                                fieldId='client-base-url'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='client-base-url'\r\n                                    name='baseUrl'\r\n                                    maxLength={254}\r\n                                    value={client.baseUrl ? client.baseUrl : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientAdminUrl')}\r\n                                fieldId='client-admin-url'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='client-admin-url'\r\n                                    name='adminUrl'\r\n                                    maxLength={254}\r\n                                    value={client.adminUrl ? client.adminUrl : ''}\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize(\"clientWebOrigins\")}\r\n                                fieldId=\"client-web-origins\"\r\n                                // labelIcon={\r\n                                //     <HelpItem\r\n                                //         helpText=\"clients-help:validRedirectURIs\"\r\n                                //         forLabel={t(\"validRedirectUri\")}\r\n                                //         forID={t(`common:helpLabel`, { label: t(\"validRedirectUri\") })}\r\n                                //     />\r\n                                // }\r\n                            >\r\n                                {client.webOrigins.length > 1 ?\r\n                                    client.webOrigins.map((origin: string, index: number) => (\r\n                                        <React.Fragment>\r\n                                            <InputGroup>\r\n                                                <TextInput\r\n                                                    type='text'\r\n                                                    id='client-web-origins'\r\n                                                    name={'webOrigins-' + index}\r\n                                                    value={origin}\r\n                                                    onChange={this.handleArrayChange}\r\n                                                />\r\n                                                <Button\r\n                                                    variant={ButtonVariant.link}\r\n                                                    onClick={() => this.removeUri(index, 'webOrigins')}\r\n                                                    tabIndex={-1}\r\n                                                    aria-label='remove'\r\n                                                >\r\n                                                    <MinusCircleIcon/>\r\n                                                </Button>\r\n                                            </InputGroup>\r\n                                        </React.Fragment>\r\n                                    )) :\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='text'\r\n                                            id='client-web-origins'\r\n                                            name={'webOrigins-' + 0}\r\n                                            value={client.webOrigins[0] ? client.webOrigins[0] : ''}\r\n                                            onChange={this.handleArrayChange}\r\n                                        />\r\n                                        <Button\r\n                                            variant={ButtonVariant.link}\r\n                                            onClick={() => this.removeUri(0, 'webOrigins')}\r\n                                            tabIndex={-1}\r\n                                            aria-label='remove'\r\n                                            isDisabled={client.webOrigins.length !== 1}\r\n                                        >\r\n                                            <MinusCircleIcon/>\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                }\r\n                                <Button\r\n                                    variant={ButtonVariant.link}\r\n                                    onClick={() => this.addUri('webOrigins')}\r\n                                    tabIndex={-1}\r\n                                    ara-label='add'\r\n                                >\r\n                                    <PlusCircleIcon/> {'add URI'}\r\n                                </Button>\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientBackchannelLogoutUrl')}\r\n                                fieldId='client-backchannel-logout-url'\r\n                            >\r\n                                <TextInput\r\n                                    type='text'\r\n                                    id='client-backchannel-logout-url'\r\n                                    name='backchannel.logout.url'\r\n                                    maxLength={254}\r\n                                    value={client.attributes[\"backchannel.logout.url\"] ? client.attributes[\"backchannel.logout.url\"] : ''}\r\n                                    onChange={this.handleAttrChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientBackchannelRequired')}\r\n                                fieldId='client-backchannel-required'\r\n                            >\r\n                                <Switch\r\n                                    id='client-backchannel-required'\r\n                                    name='backchannel.logout.session.required'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.attributes[\"backchannel.logout.session.required\"] === 'true'}\r\n                                    onChange={this.handleAttrChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup\r\n                                label={Msg.localize('clientBackchannelRevokeOfflineTokens')}\r\n                                fieldId='client-backchannel-revoke-offline-tokens'\r\n                            >\r\n                                <Switch\r\n                                    id='client-backchannel-revoke-offline-tokens'\r\n                                    name='backchannel.logout.revoke.offline.tokens'\r\n                                    label=' '\r\n                                    labelOff=' '\r\n                                    isChecked={client.attributes[\"backchannel.logout.revoke.offline.tokens\"] === 'true'}\r\n                                    onChange={this.handleAttrChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <Expandable\r\n                                toggleText='OpenID Connect Compatibility Modes'\r\n                                onToggle={() => this.onToggle(0)}\r\n                                isExpanded={this.state.isExtended[0]}\r\n                            >\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientExcludeSessionState')}\r\n                                    fieldId='client-exclude-session-state'\r\n                                >\r\n                                    <Switch\r\n                                        id='client-exclude-session-state'\r\n                                        name='exclude.session.state.from.auth.response'\r\n                                        label=' '\r\n                                        labelOff=' '\r\n                                        isChecked={client.attributes[\"exclude.session.state.from.auth.response\"] === 'true'}\r\n                                        onChange={this.handleAttrChange}\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientUseRefreshTokens')}\r\n                                    fieldId='client-use-refresh-tokens'\r\n                                >\r\n                                    <Switch\r\n                                        id='client-use-refresh-tokens'\r\n                                        name='use.refresh.tokens'\r\n                                        label=' '\r\n                                        labelOff=' '\r\n                                        isChecked={client.attributes[\"use.refresh.tokens\"] === 'true'}\r\n                                        onChange={this.handleAttrChange}\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientUseRefreshTokensCredentialGrant')}\r\n                                    fieldId='client-use-refresh-tokens-for-credential-grant'\r\n                                >\r\n                                    <Switch\r\n                                        id='client-use-refresh-tokens-for-credential-grant'\r\n                                        name='client_credentials.use_refresh_token'\r\n                                        label=' '\r\n                                        labelOff=' '\r\n                                        isChecked={client.attributes[\"client_credentials.use_refresh_token\"] === 'true'}\r\n                                        onChange={this.handleAttrChange}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Expandable>\r\n                            <Expandable\r\n                                toggleText='Advanced Settings'\r\n                                onToggle={() => this.onToggle(1)}\r\n                                isExpanded={this.state.isExtended[1]}\r\n                            >\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientAccessTokenLifeSpan')}\r\n                                    fieldId='client-access-token-lifespan'\r\n                                >\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='number'\r\n                                            id='client-access-token-lifespan'\r\n                                            name='access.token.lifespan'\r\n                                            value={client.attributes[\"access.token.lifespan\"] ? parseInt(client.attributes[\"access.token.lifespan\"])/60 : ''}\r\n                                            onChange={this.handleAttrChange}\r\n                                        />\r\n                                        <Text>Minutes</Text>\r\n                                    </InputGroup>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientSessionIdle')}\r\n                                    fieldId='client-session-idle'\r\n                                >\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='number'\r\n                                            id='client-session-idle'\r\n                                            name='client.session.idle.timeout'\r\n                                            value={client.attributes[\"client.session.idle.timeout\"] ? parseInt(client.attributes[\"client.session.idle.timeout\"])/60 : '' }\r\n                                            onChange={this.handleAttrChange}\r\n                                        />\r\n                                        <Text>Minutes</Text>\r\n                                    </InputGroup>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientSessionMax')}\r\n                                    fieldId='client-session-max'\r\n                                >\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='number'\r\n                                            id='client-session-max'\r\n                                            name='client.session.max.lifespan'\r\n                                            value={client.attributes[\"client.session.max.lifespan\"] ? parseInt(client.attributes[\"client.session.max.lifespan\"])/60 : ''}\r\n                                            onChange={this.handleAttrChange}\r\n                                        />\r\n                                        <Text>Minutes</Text>\r\n                                    </InputGroup>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientOfflineSessionIdle')}\r\n                                    fieldId='client-offline-session-idle'\r\n                                >\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='number'\r\n                                            id='client-offline-session-idle'\r\n                                            name='client.offline.session.idle.timeout'\r\n                                            value={client.attributes[\"client.offline.session.idle.timeout\"] ? parseInt(client.attributes[\"client.offline.session.idle.timeout\"])/60 : ''}\r\n                                            onChange={this.handleAttrChange}\r\n                                        />\r\n                                        <Text>Minutes</Text>\r\n                                    </InputGroup>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientOfflineSessionMax')}\r\n                                    fieldId='client-offline-session-max'\r\n                                >\r\n                                    <InputGroup>\r\n                                        <TextInput\r\n                                            type='number'\r\n                                            id='client-offline-session-max'\r\n                                            name='client.offline.session.max.lifespan'\r\n                                            value={client.attributes[\"client.offline.session.max.lifespan\"] ? parseInt(client.attributes[\"client.offline.session.max.lifespan\"])/60 : ''}\r\n                                            onChange={this.handleAttrChange}\r\n                                        />\r\n                                        <Text>Minutes</Text>\r\n                                    </InputGroup>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientTlsCertBoundAccessTokens')}\r\n                                    fieldId='client-tls-cert-bound-access-tokens'\r\n                                >\r\n                                    <Switch\r\n                                        id='client-tls-cert-bound-access-tokens'\r\n                                        name='tls.client.certificate.bound.access.tokens'\r\n                                        label=' '\r\n                                        labelOff=' '\r\n                                        isChecked={client.attributes[\"tls.client.certificate.bound.access.tokens\"] === 'true'}\r\n                                        onChange={this.handleAttrChange}\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    label={Msg.localize('clientPKCECodeChallenge')}\r\n                                    fieldId='client-pkce-code-challenge'\r\n                                >\r\n                                    <Select\r\n                                        direction='down'\r\n                                        variant={SelectVariant.single}\r\n                                        aria-label=\"Select the PKCE code challenge\"\r\n                                        onToggle={this.togglePKCEChallenge}\r\n                                        onSelect={this.selectPKCEChallenge}\r\n                                        selections={this.state.pkceChallengeSelected}\r\n                                        isExpanded={this.state.pkceChallengeExpanded}\r\n                                    >\r\n                                        {[\r\n                                            <SelectOption key={0} value={pkceChallence.S256}/>,\r\n                                            <SelectOption key={1} value={pkceChallence.plain} />,\r\n                                            <SelectOption key={2} value={pkceChallence.none} />\r\n                                        ]}\r\n                                    </Select>\r\n                                </FormGroup>\r\n                            </Expandable>\r\n                        </React.Fragment>\r\n                    }\r\n                    <ActionGroup>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            id=\"save-client-btn\"\r\n                            variant=\"primary\"\r\n                        >\r\n                            <Msg msgKey=\"doSaveClient\" />\r\n                        </Button>\r\n                        <Button\r\n                            id=\"cancel-client-btn\"\r\n                            variant=\"secondary\"\r\n                            onClick={this.handleCancel}\r\n                        >\r\n                            <Msg msgKey=\"doCancelClient\" />\r\n                        </Button>\r\n                    </ActionGroup>\r\n                </Form>\r\n            </ContentPage>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport const ManageClientPage = withRouter(ManageClient);"],"file":"ManageClientPage.js"}