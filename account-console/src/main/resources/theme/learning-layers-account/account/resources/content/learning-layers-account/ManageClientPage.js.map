{"version":3,"sources":["../../../src/app/content/learning-layers-account/ManageClientPage.tsx"],"names":["React","AccountServiceContext","ContentPage","withRouter","Msg","ContentAlert","emptyClientFields","clientId","name","description","secret","enabled","alwaysDisplayInConsole","consentRequired","bearerOnly","publicClient","standardFlowEnabled","implicitFlowEnabled","directAccessGrantsEnabled","serviceAccountsEnabled","rootUrl","redirectUris","baseUrl","adminUrl","webOrigins","defaultClientScopes","optionalClientScopes","attributes","ManageClient","Component","constructor","props","context","event","state","noClient","isExtended","client","match","params","id","undefined","requestClient","url","authUrl","realm","doGet","then","response","ok","console","log","clientData","data","setState","warning","status","statusText","render","localize","ManageClientPage"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {AccountServiceContext} from \"../../account-service/AccountServiceContext\";\r\nimport {ContentPage} from \"../ContentPage\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {Msg} from \"../../widgets/Msg\";\r\nimport {Form} from \"@patternfly/react-core\";\r\nimport {ClientRepresentation} from \"./ClientRepresentation\";\r\nimport {HttpResponse} from \"../../account-service/account.service\";\r\nimport {Client} from \"./UserClientPage\";\r\nimport {ContentAlert} from \"../ContentAlert\";\r\n\r\n// can be found at /keycloak.v2/account/index.ftl\r\ndeclare const authUrl: string;\r\ndeclare const realm: string;\r\n\r\ninterface routeParams {\r\n    id: string;\r\n}\r\n\r\nexport interface ManagePageProps extends RouteComponentProps<routeParams> {\r\n}\r\n\r\nexport interface ManagePageState {\r\n    // isRowOpen already here for later use and expanding the list of clients\r\n    noClient: boolean;\r\n    isExtended: boolean[];\r\n    client: ClientRepresentation;\r\n}\r\n\r\nexport const emptyClientFields = {\r\n    clientId: '',\r\n    name: '',\r\n    description: '',\r\n    secret: '',\r\n    enabled: false,\r\n    alwaysDisplayInConsole: false,\r\n    consentRequired: false,\r\n    bearerOnly: false,\r\n    publicClient: false,\r\n    standardFlowEnabled: false,\r\n    implicitFlowEnabled: false,\r\n    directAccessGrantsEnabled: false,\r\n    serviceAccountsEnabled: false,\r\n\r\n    rootUrl: '',\r\n    redirectUris: [],\r\n    baseUrl: '',\r\n    adminUrl: '',\r\n    webOrigins: [],\r\n\r\n    defaultClientScopes: [],\r\n    optionalClientScopes: [],\r\n\r\n    attributes: {\r\n        \"backchannel.logout.url\": '',\r\n        \"backchannel.logout.session.required\": \"false\",\r\n        \"backchannel.logout.revoke.offline.tokens\": \"false\",\r\n        \"oauth2.device.authorization.grant.enabled\": \"false\",\r\n\r\n        \"access.token.lifespan\": '',\r\n        \"client.session.idle.timeout\": '',\r\n        \"client.session.max.lifespan\": '',\r\n        \"client.offline.session.idle.timeout\": '',\r\n        \"client.offline.session.max.lifespan\": '',\r\n        \"tls.client.certificate.bound.access.tokens\": '',\r\n        \"pkce.code.challenge.method\": '',\r\n        \"use.refresh.tokens\": \"false\",\r\n        \"client_credentials.use_refresh_token\": \"false\",\r\n        \"exclude.session.state.from.auth.response\": \"false\",\r\n    }\r\n}\r\n\r\n\r\nexport class ManageClient extends React.Component<ManagePageProps, ManagePageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n\r\n    public constructor(props: ManagePageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n        this.state = {\r\n            noClient: true,\r\n            isExtended: [false, false],\r\n            client: emptyClientFields,\r\n        }\r\n\r\n        if (this.props.match.params.id !== undefined) {\r\n            this.requestClient(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    private requestClient(clientId: string): void {\r\n        let url = authUrl + 'realms/' + realm + '/userClientAdministration/client/' + clientId;\r\n        this.context!.doGet<ClientRepresentation>(url).then((response: HttpResponse<ClientRepresentation>) => {\r\n            if (response.ok){\r\n                console.log(this.state)\r\n                const clientData = response.data || emptyClientFields;\r\n                this.setState({\r\n                    noClient: false,\r\n                    isExtended: [false, false],\r\n                    client: clientData,\r\n                });\r\n                console.log(\"got client data:\");\r\n                console.log(response.data);\r\n                console.log(this.state.client)\r\n            }\r\n            else {\r\n                ContentAlert.warning('You have no access to the client!.\\n' +  response.status + ' ' + response.statusText);\r\n            }\r\n        });\r\n        if (this.state.client == emptyClientFields){\r\n            console.log(\"got no data for client\")\r\n        }\r\n    }\r\n\r\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        console.log(this.props);\r\n        return(\r\n            <ContentPage title={(this.state.noClient ? 'Create new client' : Msg.localize(\"manageClientTitle\") + this.state.client.clientId)}\r\n                         introMessage={(this.state.noClient ? '' : Msg.localize(\"manageClientDescription\"))}>\r\n                {/*<Form isHorizontal onSubmit={event => this.handleSubmit(event)}>*/}\r\n                <object>\r\n                    {this.state.client}\r\n                </object>\r\n\r\n                {/*</Form>*/}\r\n                <h1>{this.state.client.clientId}</h1>\r\n            </ContentPage>\r\n        );\r\n    }\r\n\r\n}\r\nexport const ManageClientPage = withRouter(ManageClient);"],"file":"ManageClientPage.js"}